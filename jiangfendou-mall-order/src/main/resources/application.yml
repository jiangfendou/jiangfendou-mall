server:
  port: 8083

spring:
#  datasource:
#    #MySQL配置
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://124.223.77.220:3306/jiangfendou-mall-oms?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
#    username: root
#    password: password
  # nacos
  cloud:
    nacos:
      discovery:
        server-addr: 124.223.77.220
    sentinel:
      transport:
        port: 8719
        dashboard: localhost:8080
  application:
    name: jiangfendou-mall-order
  zipkin:
    base-url: http://124.223.77.220:9411/
    discovery-client-enabled: false
    sender:
      type: web
  # 设置抽样采集率100%，默认0.1，即10%
  sleuth:
    sampler:
      probability: 1
  # 初始化dispatcherServlet，默认-1未开启，0及以上为开启
#  mvc:
#    servlet:
#      load-on-startup: 1

  # rabbitmq
  rabbitmq:
    host: 124.223.77.220
    port: 5672
    virtual-host: /
    # 开启发送端确认
    # ·NONE
    # 禁用发布确认模式，是默认值
    # ·CORRELATED
    # 发布消息成功或失败到交换器后会触发回调方法
    # ·SIMPLE    性能差
    # 经测试有两种效果，其一效果和CORRELATED值一样会触发回调方法，
    # 其二在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法
    # 等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是
    # waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker
    publisher-confirm-type: correlated
    # 队列发布确认，失败会回调
    publisher-returns: true
    # 只要抵达队列，以异步发送有点回调我们这个return confirm
    template:
      mandatory: true
    # 手动ACK 手动确认收货
    listener:
      type: direct
      direct:
        acknowledge-mode: manual
  thymeleaf:
    cache: false

  main:
    allow-circular-references: true
  # redis
  redis:
    host: 124.223.77.220
    port: 6379
    password: 123456
  session:
    store-type: redis
  mvc:
    format:
      date: yyyy-MM-dd HH:mm:ss
management:
  endpoints:
    web:
      exposure:
        include: '*'

#mybatis-plus:
#  mapper-locations: classpath*:/mapper/**.xml
#  #主键自增
#  global-config:
#    db-config:
#      id-type: auto

#配置线程池
jiangfendou:
  thread:
    coreSize: 20
    maxSize: 200
    keepAliveTime: 10

#seata
#seata:
#  application-id: ${spring.application.name}
#  tx-service-group: btb_tx_group
#  config:
#    type: nacos
#    nacos:
#      server-addr: 124.223.77.220:8848
#      group: SEATA_GROUP
#  registry:
#    type: nacos
#    nacos:
#      application: seata-server
#      server-addr: 124.223.77.220:8848
#      group: SEATA_GROUP

#-------------------------seata相关配置-------------------------------------------------------------
seata:
  application-id: ${spring.application.name}
  enabled: true
  tx-service-group: my_test_tx_group #此处的配置来源于上述步骤中config.txt中的service.vgroupMapping.my_test_tx_group=default
  registry:
    type: nacos
    nacos:
      server-addr: 124.223.77.220:8848 #nacos的连接地址
      namespace: 2b0b4c20-5368-478b-b7dc-5eb34fb4300f #在nacos中创建的seata命名空间ID
      group: SEATA_GROUP #seata配置的分组名称
      cluster: default
      username: nacos
      password: nacos
  config:
    type: nacos
    nacos:
      server-addr: 124.223.77.220:8848 #nacos的连接地址
      namespace: 2b0b4c20-5368-478b-b7dc-5eb34fb4300f #在nacos中创建的seata命名空间ID
      group: SEATA_GROUP #seata配置的分组名称
      username: nacos
      password: nacos
  service:
    vgroup-mapping:
      my_test_tx_group: default #此处的配置来源于上述步骤中config.txt中的service.vgroupMapping.my_test_tx_group=default
      #注意：此处的my_test_tx_group需要和上面seata.tx-service-group以及config.txt中的配置对应


# 支付宝配置
alipay:
  app_id: 2021000122606271
  merchant_private_key: MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCrHx3lt8rtxSHfuNjYpQ5vkqv23Q9p4q9h1iSYVHBPBxkKtS2gsYXZfLMysa8Rba/AfL5vcLtO+4Fz2cbk8kVsZkojUtcz7NImA77eRYmeSOCNNoYx7VuhvBbSrM7alMP69BmPtwf1P4AcmRloK1IhcdSI7H9W0WE17n4IyuWte73SbXV+DOFHmt6zD5fqJOaJxnd3zJEm2T7Kwc3lGRcIab/m8vJ9nldd3+gSJzloWtMkR2vDjjAQ//8nR2k6bxpucoKvdWsQ0F0RnkqT3Ht8h1yihX4SCtUhoujan+d9eO2To8p6Lu+TfZiMj1c5SyLM6K5WY3hB7G8fOidjzFubAgMBAAECggEAKLDdiyKJPsEBrRFnfxzAsgdOnQU0BRnCWqFxUkfB7QjjC4jJsMyF55Gfiw51cs+CW2NOZXGJGN71iXbftNFncL9iIcQxKEfIMQHzASfH8buiqfGtN3IZt/vh8XbmOVPmxmYFLgd3/Pl8nVBKmlqyzQEkaOrT3PEtDIYJsk2NEBNZCUInqWPMOB/BDR/SwnxPugSVL5mcBE7LgTWirIy6r8IJtpanH3HU5Dz9C+g3dkbAF32hsM2FzWC+PDOFPtJgMTPR6hWgXDXT81IoRVsYWwFhj6zNxJ9Sr6/JPPa3y0DcMJZPOIMKVv35S4Lq49vre6gf6W+KiaG7H6Gh0sbCAQKBgQDbaO9+SpCYtGEK3wS1q/0P5FiYMNN5lwNjcH1JpIiN2u3wsklsd5C0BxEj502aGE3ixgslxFH8E3iX35yfaeQAeACCxeS/wmKpUbJ0TESs9pW+bFpYmBGbc1I2pgchKuj+cOjjdYpkLVK3c18sUi1hHwTNtHy/lM6Rk1fER78ieQKBgQDHqKawknFqSOj8nmj66UaNvMAm9k2InVM7SW10cj/9aGmErpxrYJVzqp7o0WZyIUumzbbdrYG+2a0Piy/CJ2qGt4/pV9TVl6hPuPy7FZlr3EGTawZkRTEWvYTaeO8rN9+2mkdCPaP41f+By/oueJ094Ag4p/SWGCa5QMRmdDkJswKBgHcngsCcL/CuLPFhckZTE8h4ouBry70BlPaA1ZmTwBEBryyDNjqwqCYMnHNaHxurTUj1coJdHoT98gTQjFdKg2b5xJVAcVzubPQ1COv9q2IfO+1BHMN2OkGonCJPghmyGvxrRx6X68NBleVIw4vnSPuwg8RO21yTrKcEVKqkqBlJAoGBAK6r3kDFrVFVvfcbwy4YHXBsvBKaEpS9Ro6sm4RvW4of6Yh5lkDee4F4uJNodt7MQDoK6LuhSswj9aKOm1aZUznOp6l1/K5sgoRUi05FBDb3t6r3y9y3J84EOZFEkcDWnfJLoKHT+Xr+BQ2R3SsAvFfggnDGh1U0hdQ2VFxpu2i/AoGAMEkLr/0PkP7q2NhYUAl47f+vk1cYetzkXGm8hEWAh2BDS/UDjDKUBuVhoLUD6ETeJfAkOz9QSEB492w6kA3KiNERiD9b0y/lwLhl1iqAQk2yU0jcL2gu2hrGRfLGzsrOmRox3PRMn5dybvDrpSiJm0mQDH3xb1aaatOHNj217zo=
  alipay_public_key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo8fS2G18IO0x3ejVEQtgFjyk6BlqGYW68wgDzT0Iv4SkDZvsOzgnKvBuHWcdZGAeeb0dgh+wdFrptAN/XNp01noSkoWGd03YgYFC14AZHhdbHp622fKUpbsgFkcin7eMvBcHiEZ1Fbhht6tqBAdQlAckJF4qiYrao0/DbK0A+oHiNjZLpAQy7JfNCkdkAOTS88PxeEsgP12Dkji+k9Dzkmn50x1pwUO/I3X2DBRK6RZJfW9bfiRlyTiSvvvUxdVMxwlxWdFxWI2itywQq579MPe3ioIDE9XeKSGP4jc+KpHUmZR5UvbgVXkEO0h1htNVbMgZCI2lseTXKPQVnehT2wIDAQAB
  notify_url: http://67e068g652.zicp.fun:27094/payed/notify
#  return_url: http://localhost:8083/pay/success.html
  return_url: http://member.jiangfendou.com/memberOrder.html
  gatewayUrl: https://openapi.alipaydev.com/gateway.do
  sign_type: RSA2
  charset: utf-8

# 开启sentinel对feign的熔断机制
feign:
  sentinel:
    enabled: true